import argparse

import requests

import dcd.SRCHelper as srcHelper
import json
import csv
import os
from dotenv import load_dotenv


load_dotenv()

parser = argparse.ArgumentParser(description="Add Single Star runs parser")

parser.add_argument('--stars', required=False, type=str, default='run_list.csv',
                    help='game to get runs from')
parser.add_argument('--hacks', required=False, type=str, default='hacks.json',
                    help='Hack list json')
parser.add_argument('--live', required=False, type=str, default='False',
                    help='is this a live run? if you want to try to add these to SRC turn to true, else be false and just print what it would add')
args = parser.parse_args()

load_dotenv()
run_list = args.stars
hack_list = args.hacks
live_run = True if args.live.lower() == 'true' else False
#expects a .env file with SRC_API_KEY, you can get the key from https://www.speedrun.com/<YOUR_USER_HERE>/settings/api
SRC_API_KEY = os.getenv('SRC_API_KEY')


def get_secs(time_str):
    split = time_str.split(':')
    if len(split) == 3:
        h, m, s = split
    elif len(split) == 2:
        h = 0
        m, s = split
    else:
        h = 0
        m = 0
        s = split[0]
    return int(h) * 3600 + int(m) * 60 + int(s)


def get_game_cat(game_name, cat_name):
    hacks = json.load(open(hack_list))
    for hack in hacks:
        if hack['name'] == game_name:
            return [hack['id'], hack['categories'][cat_name]]


if __name__ == '__main__':
    run_data = []
    with open(run_list) as csvfile:
        # expects file in this format pipe delimited. Hack/Category/Runner has to match hack name on SRC, time in h:mm:ss.SSS, date in YYYY-MM-DD, video can be anything, also expects header
        fieldnames = ['Hack', 'Category', 'Runner', 'Time', 'Date', 'Video']
        reader = csv.DictReader(csvfile, delimiter='|', fieldnames=fieldnames)
        row_cnt = 0
        for row in reader:
            row_cnt += 1
            if row_cnt == 1:
                continue
            #expects a hacks.json file, this can be generated by running get_romhacks.py
            game_res = get_game_cat(row['Hack'].strip(), row['Category'].strip())
            game_id = game_res[0]

            cat_id = game_res[1]


            user_url = srcHelper.get_user(row['Runner'].strip())
            user_id = srcHelper.request_src(user_url)['data']['id']

            run_url = row['Video'].strip()
            run_time = get_secs(row['Time'].strip())
            run_date = row['Date'].strip()
            run_json = {'game_id': game_id, 'cat_id': cat_id, 'user_id': user_id, 'run_time': run_time,
                        'run_date': run_date, 'run_url': run_url}

            #check this run isn't already on SRC
            runs_by_user_game_cat_url = srcHelper.get_runs_by_user_game_cat(user_id, game_id, cat_id)
            runs_by_user_game_cat = srcHelper.request_src(runs_by_user_game_cat_url)['data']
            found_run = False
            for run in runs_by_user_game_cat:
                if run['times']['primary_t'] <= run_time:
                    found_run = True
            #add run if not on SRC
            if not found_run:
                run_data.append(run_json)

    for run in run_data:
        add_run_request_body = srcHelper.get_fullgame_run_body(run['user_id'], run['run_time'], run['run_date'],
                                                               'w89rwelk', True, run['run_url'], run['cat_id'])

        if live_run:
            print(add_run_request_body)
            runs_url = srcHelper.get_runs_url()
            post_src_res = srcHelper.post_src(runs_url, add_run_request_body, SRC_API_KEY)
            print(post_src_res)
        else:
            print(run)


